name: Create Release and Upload Binaries

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    
    # This block tells GitHub to run all steps inside an ubuntu:20.04 Docker container
    container:
      image: ubuntu:20.04
      
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Prepare container environment
        run: |
          apt-get update
          # Install software-properties-common to get add-apt-repository
          apt-get install -y software-properties-common
          # Add the deadsnakes PPA for newer Python versions
          add-apt-repository ppa:deadsnakes/ppa -y
          # Install Python 3.11 and pip
          apt-get install -y python3.11 python3-pip
          
      - name: Install dependencies
        run: pip3 install -r requirements.txt
        
      - name: Build with PyInstaller
        run: |
          export ARTIFACT_NAME=PCDdebugger-${{ github.ref_name }}-linux
          pyinstaller --onefile --name "${ARTIFACT_NAME}" PCDdebugger.py
          
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: PCDdebugger-${{ github.ref_name }}-linux
          path: dist/PCDdebugger-${{ github.ref_name }}-linux

  build-macos-windows:
    name: Build for ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Set artifact name
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "ARTIFACT_NAME=PCDdebugger-${{ github.ref_name }}-windows.exe" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=PCDdebugger-${{ github.ref_name }}-macos" >> $GITHUB_ENV
          fi
        shell: bash
        
      - name: Build with PyInstaller
        run: pyinstaller --onefile --name "${{ env.ARTIFACT_NAME }}" PCDdebugger.py
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: dist/${{ env.ARTIFACT_NAME }}*

  create-release:
    name: Create GitHub Release
    needs: [build-linux, build-macos-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          generate_release_notes: true
          files: |
            artifacts/**/*