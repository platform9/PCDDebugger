name: Create Release and Upload Binaries

# This workflow runs ONLY when a new tag is pushed that starts with "v" (e.g., v1.0, v1.2.3)
on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-upload:
    name: Build for ${{ matrix.os }}
    # Use a matrix strategy to build on all 3 operating systems
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    # 1. Check out the repository's code
    - name: Check out code
      uses: actions/checkout@v4

    # 2. Set up the Python environment
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # 3. Install your project's dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirement.txt

    # 4. Determine the output name based on the OS
    - name: Set artifact name
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "ARTIFACT_NAME=PCDdebugger-${{ github.ref_name }}-windows.exe" >> $GITHUB_ENV
        elif [ "${{ runner.os }}" == "macOS" ]; then
          echo "ARTIFACT_NAME=PCDdebugger-${{ github.ref_name }}-macos" >> $GITHUB_ENV
        else
          echo "ARTIFACT_NAME=PCDdebugger-${{ github.ref_name }}-linux" >> $GITHUB_ENV
        fi
      shell: bash

    # 5. Build the executable using PyInstaller
    - name: Build with PyInstaller
      run: pyinstaller --onefile --name "${{ env.ARTIFACT_NAME }}" PCDdebugger.py

    # 6. Upload the executable as a build artifact (for the release job)
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: dist/${{ env.ARTIFACT_NAME }}* # Use wildcard for .exe on Windows

  create-release:
    name: Create GitHub Release
    # This job depends on the build jobs completing successfully
    needs: build-and-upload
    runs-on: ubuntu-latest

    steps:
    # 1. Download all the build artifacts (the executables) from the previous jobs
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    # 2. Create the GitHub Release and upload the binaries
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        # This will create a release with the same name as the tag (e.g., v1.0.0)
        tag_name: ${{ github.ref }}
        # This uses the commit message of the tag for the release notes
        generate_release_notes: true
        # Upload all files from the 'artifacts' directory
        files: |
          artifacts/**/*
